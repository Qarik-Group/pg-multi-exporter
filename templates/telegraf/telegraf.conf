(@ load("@ytt:data", "data") @)


# [agent]
#   debug = true

[[outputs.influxdb]]
  urls = ["(@= data.values.config.influxdb.endpoint @)"]
  name_prefix = "(@= data.values.config.influxdb.name_prefix @)"

# IAAS specific configs
(@ if data.values.config.gcp.service_account: @)
(@ load("@ytt:json", "json") @)
[[inputs.stackdriver]]
  ## GCP Project
  project = "(@= json.decode(data.values.config.gcp.service_account)["project_id"] @)"

  ## Include timeseries that start with the given metric type.
  metric_type_prefix_include = [
    "cloudsql.googleapis.com/database/cpu/utilization",
    "cloudsql.googleapis.com/database/disk/read_ops_count",
    "cloudsql.googleapis.com/database/disk/write_ops_count",
  ]

  interval = "1m"

[[processors.rename]]
  [[processors.rename.replace]]
    measurement = "cloudsql.googleapis.com/database/cpu"
    dest = "database_cpu"
  [[processors.rename.replace]]
    measurement = "scloudsql.googleapis.com/database/disk"
    dest = "database_disk"
(@ end @)

(@ for d in data.values.config.databases: @)
[[inputs.postgresql]]
  address = "host=(@= d.host @) port=(@= str(d.port) @) user=(@= d.username @) password=(@= d.password @) database=postgres sslmode=disable"

[[inputs.postgresql_extensible]]
  address = "host=(@= d.host @) port=(@= str(d.port) @) user=(@= d.username @) password=(@= d.password @) database=postgres sslmode=disable"
  [[inputs.postgresql_extensible.query]]
    sqlquery='''
      SELECT t2.rolname as rolname, t3.datname as datname, queryid, calls,
	     total_time / 1000 as total_time_seconds,
	     min_time / 1000 as min_time_seconds,
	     max_time / 1000 as max_time_seconds,
	     mean_time / 1000 as mean_time_seconds,
	     stddev_time / 1000 as stddev_time_seconds,
	     rows,
	     shared_blks_hit, shared_blks_read, shared_blks_dirtied, shared_blks_written,
	     local_blks_hit, local_blks_read, local_blks_dirtied, local_blks_written,
	     temp_blks_read, temp_blks_written,
	     blk_read_time / 1000 as blk_read_time_seconds,
	     blk_write_time / 1000 as blk_write_time_seconds
      FROM pg_stat_statements t1
      JOIN pg_roles t2 ON (t1.userid=t2.oid)
      JOIN pg_database t3 ON (t1.dbid=t3.oid)
    '''
    version=901
    withdbname=false
    tagvalue="rolname,datname,queryid"
(@ end @)
